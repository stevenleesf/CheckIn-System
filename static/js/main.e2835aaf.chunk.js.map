{"version":3,"sources":["http-common.js","services/CustomerService.js","components/Mainpage.js","components/Checkin.js","components/Register.js","components/Listofplace.js","App.js","serviceWorker.js","index.js"],"names":["axios","create","baseURL","headers","http","get","id","data","post","Mainpage","props","useState","currentTutorial","setCurrentTutorial","useEffect","match","params","TutorialDataService","then","response","console","log","catch","e","className","locationname","to","Button","variant","Checkin","initialTutorialState","locationid","name","nric","temp","date","tutorial","setTutorial","submitted","setSubmitted","Date","value","onChange","handleInputChange","event","target","InputGroup","Prepend","Text","FormControl","type","required","placeholder","aria-label","aria-describedby","format","onClick","Register","Listofplace","tutorials","setTutorials","retrieveTutorials","map","index","setActiveTutorial","App","basename","Nav","as","Item","Link","href","exact","path","component","Home","listofplaces","Boolean","window","location","hostname","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e2835aaf.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nexport default axios.create({\r\n  baseURL: \"http://localhost:3001\",\r\n  headers: {\r\n    \"Content-type\": \"application/json\"\r\n  }\r\n});","/* eslint-disable import/no-anonymous-default-export */\r\nimport http from \"../http-common\";\r\n\r\nconst getAll = () => {\r\n  return http.get(\"/list\");\r\n};\r\n\r\nconst get = id => {\r\n  return http.get(`/customers/${id}`);\r\n};\r\n\r\nconst getOne = id => {\r\n  return http.get(`/bylocation/${id}`);\r\n};\r\n\r\nconst getOnebyName = locationname => {\r\n  return http.get(`/bylocationName/${locationname}`);\r\n};\r\n\r\nconst create = data => {\r\n  return http.post(\"/customers\", data);\r\n};\r\n\r\nconst createcheckin =(id, data) => {\r\n  return http.post(`/createcheckin/${id}`, data);\r\n};\r\n\r\n\r\n\r\n\r\n\r\nexport default {\r\n  getAll,\r\n  get,\r\n  getOne,\r\n  create,\r\n  createcheckin,\r\n  getOnebyName,\r\n};","import React, { useState, useEffect } from 'react'\r\nimport Button from 'react-bootstrap/Button'\r\nimport { Link } from 'react-router-dom'\r\nimport TutorialDataService from \"../services/CustomerService\";\r\n\r\nconst Mainpage = props => {\r\n    const initialTutorialState = {\r\n        id: null\r\n    };\r\n    const [currentTutorial, setCurrentTutorial] = useState(initialTutorialState);\r\n    const getTutorial = id => {\r\n        TutorialDataService.getOne(id)\r\n            .then(response => {\r\n                setCurrentTutorial(response.data);\r\n                console.log(response.data);\r\n            })\r\n            .catch(e => {\r\n                console.log(e);\r\n            });\r\n    };\r\n    useEffect(() => {\r\n        getTutorial(props.match.params.id);\r\n    }, [props.match.params.id]);\r\n    return (\r\n        <div>\r\n            <div className=\"container p-3 my-3 border\">\r\n                <h1>{currentTutorial.locationname}</h1>\r\n                <br></br>\r\n                <p>Welcome to Checkin Application, Develop for {currentTutorial.locationname}</p>\r\n                <Link to={`/createcheckin/${currentTutorial.id}`} className='btn-link'>\r\n                    <Button variant=\"outline-secondary\" >Check-In</Button>\r\n                </Link>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Mainpage\r\n","import React, { useState, useEffect } from 'react'\r\nimport InputGroup from 'react-bootstrap/InputGroup'\r\nimport FormControl from 'react-bootstrap/FormControl'\r\nimport DateTimePicker from 'react-datetime-picker'\r\nimport Button from 'react-bootstrap/Button'\r\nimport TutorialDataService from \"../services/CustomerService\";\r\n\r\nconst Checkin = props => {\r\n    \r\n    const initialTutorialState = {\r\n        locationid: null,\r\n        name: \"\",\r\n        nric: \"\",\r\n        temp: \"\",\r\n        date: null,\r\n        \r\n    };\r\n    const [tutorial, setTutorial] = useState(initialTutorialState);\r\n    const [submitted, setSubmitted] = useState(false);\r\n    const [value, onChange] = useState(new Date());\r\n\r\n    const handleInputChange = event => {\r\n        const { name, value } = event.target;\r\n        setTutorial({ ...tutorial, [name]: value });\r\n    };\r\n\r\n    const saveTutorial = () => {\r\n        var data = {\r\n            locationid: props.match.params.id,\r\n            name: tutorial.name,\r\n            nric: tutorial.nric,\r\n            temp: tutorial.temp,\r\n            date: value,\r\n            \r\n        };\r\n        TutorialDataService.createcheckin(data.locationid,data)\r\n            .then(response => {\r\n                console.log(data)\r\n                setTutorial({\r\n                    locationid: props.match.params.locationid,\r\n                    name: response.data.name,\r\n                    nric: response.data.nric,\r\n                    temp: response.data.temp,\r\n                    date: response.data.date,\r\n\r\n                });\r\n                setSubmitted(true);\r\n                console.log(response.data);\r\n            })\r\n            .catch(e => {\r\n                console.log(e);\r\n            });\r\n    \r\n    };\r\n    const [currentTutorial, setCurrentTutorial] = useState(initialTutorialState);\r\n    const getTutorial = id => {\r\n        TutorialDataService.getOne(id)\r\n            .then(response => {\r\n                setCurrentTutorial(response.data);\r\n                console.log(response.data);\r\n            })\r\n            .catch(e => {\r\n                console.log(e);\r\n            });\r\n    };\r\n    useEffect(() => {\r\n        getTutorial(props.match.params.id);\r\n    }, [props.match.params.id]);\r\n\r\n\r\n\r\n     function DateFuction() {\r\n         onChange();\r\n         \r\n\r\n     }\r\n    return (\r\n        <div>\r\n            {submitted ? (\r\n                <div className=\"container p-3 my-3 border\">\r\n                    <h4>You Check-In {currentTutorial.locationname} </h4>\r\n                    <h4>You Check-In successfully!</h4>\r\n                </div>\r\n            ) : (\r\n\r\n                    <div className=\"container p-3 my-3 border\">\r\n                        <h2 >Check In</h2>\r\n                        <InputGroup className=\"mb-4\">\r\n                            <InputGroup.Prepend>\r\n                                <InputGroup.Text id=\"inputGroup-sizing-default\">Full Name</InputGroup.Text>\r\n                            </InputGroup.Prepend>\r\n                            <FormControl\r\n                                type=\"text\"\r\n                                id=\"name\"\r\n                                required\r\n                                value={tutorial.name}\r\n                                onChange={handleInputChange}\r\n                                name=\"name\"\r\n                                placeholder=\"Full Name\"\r\n                                aria-label=\"Default\"\r\n                                aria-describedby=\"inputGroup-sizing-default\"\r\n                            />\r\n                        </InputGroup>\r\n                        <InputGroup className=\"mb-4\">\r\n                            <InputGroup.Prepend>\r\n                                <InputGroup.Text id=\"inputGroup-sizing-default\">NRIC</InputGroup.Text>\r\n                            </InputGroup.Prepend>\r\n                            <FormControl\r\n                                type=\"text\"\r\n                                id=\"nric\"\r\n                                required\r\n                                value={tutorial.nric}\r\n                                onChange={handleInputChange}\r\n                                name=\"nric\"\r\n                                placeholder=\"980120145566\"\r\n                                aria-label=\"Default\"\r\n                                aria-describedby=\"inputGroup-sizing-default\"\r\n                            />\r\n                        </InputGroup>\r\n                        <InputGroup className=\"mb-4\">\r\n                            <InputGroup.Prepend>\r\n                                <InputGroup.Text id=\"inputGroup-sizing-default\">Body Temperature</InputGroup.Text>\r\n                            </InputGroup.Prepend>\r\n                            <FormControl\r\n                                type=\"text\"\r\n                                id=\"temp\"\r\n                                required\r\n                                value={tutorial.temp}\r\n                                onChange={handleInputChange}\r\n                                name=\"temp\"\r\n                                placeholder=\"Value in Celsius\"\r\n                                aria-label=\"Default\"\r\n                                aria-describedby=\"inputGroup-sizing-default\"\r\n                            />\r\n                        </InputGroup>\r\n                        <InputGroup className=\"mb-4\">\r\n                            <InputGroup.Prepend>\r\n                                <InputGroup.Text id=\"inputGroup-sizing-default\">Time And Data</InputGroup.Text>\r\n                            </InputGroup.Prepend>\r\n                            <DateTimePicker\r\n                                type=\"text\"\r\n                                id=\"date\"\r\n                                required\r\n                                name=\"date\"\r\n                                format= {\"y-MM-dd h:mm:ss a\"}\r\n                                onChange={DateFuction}\r\n                                value={value}\r\n                            />\r\n                            <FormControl\r\n\r\n                                aria-label=\"Default\"\r\n                                aria-describedby=\"inputGroup-sizing-default\"\r\n                            />\r\n                        </InputGroup>\r\n\r\n                        <Button variant=\"outline-secondary\" onClick={saveTutorial} >Check-In</Button>\r\n\r\n\r\n                    </div>\r\n                )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Checkin\r\n","import React, { useState } from 'react'\r\nimport InputGroup from 'react-bootstrap/InputGroup'\r\nimport FormControl from 'react-bootstrap/FormControl'\r\nimport Button from 'react-bootstrap/Button'\r\nimport TutorialDataService from \"../services/CustomerService\";\r\n\r\n\r\nconst Register= props => {\r\n  const initialTutorialState = {\r\n    locationname: \"\",\r\n    \r\n  };\r\n  const [tutorial, setTutorial] = useState(initialTutorialState);\r\n  const [submitted, setSubmitted] = useState(false);\r\n\r\n  const handleInputChange = event => {\r\n    const { name, value } = event.target;\r\n    setTutorial({ ...tutorial, [name]: value });\r\n  };\r\n\r\n  const saveTutorial = () => {\r\n    var data = {\r\n      \r\n      locationname: tutorial.locationname,\r\n     \r\n    };\r\n\r\n  TutorialDataService.create(data)\r\n      .then(response => {\r\n        setTutorial({\r\n          \r\n          locationname: response.data.locationname,\r\n          \r\n        });\r\n        setSubmitted(true);\r\n        console.log(response.data);\r\n      })\r\n      .catch(e => {\r\n        console.log(e);\r\n      });\r\n    };\r\n\r\n    return (\r\n    \r\n    <div>\r\n        {submitted ? (\r\n        <div className=\"container p-3 my-3 border\">\r\n          <h4>You submitted successfully!</h4>\r\n        </div>\r\n      ) :(\r\n        <div className=\"container p-3 my-3 border\">\r\n            <h2 >Register</h2>\r\n            <InputGroup className=\"mb-4\">\r\n                <InputGroup.Prepend>\r\n                    <InputGroup.Text id=\"inputGroup-sizing-default\">Location Name</InputGroup.Text>\r\n                </InputGroup.Prepend>\r\n                <FormControl\r\n                    type=\"text\"\r\n                    id=\"locationname\"\r\n                    required\r\n                    value={tutorial.locationname}\r\n                    onChange={handleInputChange}\r\n                    name=\"locationname\"\r\n                    placeholder=\"Full Name\"\r\n                    aria-label=\"Default\"\r\n                    aria-describedby=\"inputGroup-sizing-default\"\r\n                />\r\n            </InputGroup>\r\n\r\n            <Button variant=\"outline-secondary\" onClick={saveTutorial}  >Register Location</Button>\r\n\r\n\r\n        </div>\r\n      )}\r\n\r\n\r\n        \r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Register\r\n","import React, { useState, useEffect } from 'react'\r\nimport TutorialDataService from \"../services/CustomerService\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Listofplace = () => {\r\n    const [tutorials, setTutorials] = useState([]);\r\n    const [currentTutorial, setCurrentTutorial] = useState(null);\r\n\r\n\r\n    useEffect(() => {\r\n        retrieveTutorials();\r\n    }, []);\r\n\r\n    const retrieveTutorials = () => {\r\n        TutorialDataService.getAll()\r\n            .then(response => {\r\n                setTutorials(response.data);\r\n                console.log(response.data);\r\n            })\r\n            .catch(e => {\r\n                console.log(e);\r\n            });\r\n    };\r\n    const setActiveTutorial = (tutorial, index) => {\r\n        setCurrentTutorial(tutorial);\r\n\r\n    };\r\n\r\n    return (\r\n        <div className=\"list-group\">\r\n\r\n            <div className=\"container p-3 my-3 border\">\r\n                <h4>Location List</h4>\r\n\r\n                <ul className=\"list-group\">\r\n                    {tutorials &&\r\n                        tutorials.map((tutorial, index) => (\r\n                            <li\r\n\r\n                                onClick={() => setActiveTutorial(tutorial, index)}\r\n                                key={index}\r\n                            >\r\n                                {tutorial.locationname}\r\n                            </li>\r\n                        ))}\r\n                </ul>\r\n\r\n\r\n            </div>\r\n            <div className=\"container p-3 my-3 border\">\r\n                {currentTutorial ? (\r\n                    <div>\r\n                        <h4>Information</h4>\r\n                        <div>\r\n                            <label>\r\n                                <strong>Location:</strong>\r\n                            </label>{\" \"}\r\n                            {currentTutorial.locationname}\r\n                        </div>\r\n                        <div>\r\n                            <label>\r\n                                <strong>ID:</strong>\r\n                            </label>{\" \"}\r\n                            {currentTutorial.id}\r\n                        </div>\r\n\r\n\r\n                        <Link\r\n                            to={\"/createcheckin/\" + currentTutorial.id}\r\n                            className=\"btn btn-outline-dark btn--medium\"\r\n                        >\r\n                            Check In\r\n                         </Link>\r\n                    </div>\r\n                ) : (\r\n                        <div>\r\n                            <br />\r\n                            <p>Please click on a Button...</p>\r\n                        </div>\r\n                    )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Listofplace\r\n","import React from 'react';\nimport { Switch,Route } from 'react-router';\nimport { HashRouter  } from 'react-router-dom'\nimport './App.css';\nimport Nav from 'react-bootstrap/Nav'\nimport Home from './components/Mainpage'\nimport Checkin from './components/Checkin'\nimport Register from './components/Register'\nimport listofplaces from './components/Listofplace'\n\n\nfunction App() {\n\n  return (\n      \n      <HashRouter basename=\"/\">\n        <Nav className=\"justify-content-center\"  as=\"ul\" variant=\"tabs\" >\n          <Nav.Item as=\"li\">\n            <Nav.Link href=\"/1\">Home</Nav.Link>\n          </Nav.Item>\n          <Nav.Item as=\"li\">\n            <Nav.Link href=\"/Listofplaces/1\">List of Places</Nav.Link>\n          </Nav.Item>\n          <Nav.Item as=\"li\">\n            <Nav.Link href=\"/Register/1\">Register</Nav.Link>\n          </Nav.Item>\n        </Nav>\n        <Switch>\n        <Route exact path='/:id'  component={Home}/>\n        <Route exact path='/createcheckin/:id' component={Checkin}/>\n        <Route exact path='/Register/:id' component={Register}/>\n        <Route exact path='/Listofplaces/:id' component={listofplaces}/>\n        </Switch>\n      </HashRouter>\n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.0/8 are considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  export function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                );\r\n  \r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n  \r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n      headers: { 'Service-Worker': 'script' }\r\n    })\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready\r\n        .then(registration => {\r\n          registration.unregister();\r\n        })\r\n        .catch(error => {\r\n          console.error(error.message);\r\n        });\r\n    }\r\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter } from \"react-router-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport 'bootstrap/dist/css/bootstrap.css';\n\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}